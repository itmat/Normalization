.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "File::Type::Builder 3"
.TH File::Type::Builder 3 "2004-05-06" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Type::Builder \- parse mime\-magic and generate code
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $build = File::Type::Builder\->new();
\&    
\&    while (<magic>) {
\&      chomp;
\&      my $parsed = $build\->parse_magic($_);
\&      
\&      my $code   = $build\->string_start($parsed);
\&      (or string_offset or beshort)
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Reads in the mime-magic file format and translates it to code.
(This documentation would be longer if I really expected anyone other 
than me to run the code.)
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Creates a new File::Type::Builder object.
.SS "parse_magic"
.IX Subsection "parse_magic"
Pulls apart a line of a mime-magic file using a string of regular 
expressions.
.PP
An example mime-magic file can be found in cleancode \s-1CVS\s0 at
<http://cleancode.org/cgi\-bin/viewcvs.cgi/email/mime\-magic.mime?rev=1.1.1.1>
.SS "string"
.IX Subsection "string"
Builds code to match magic that's of type string.
.PP
Has to do some cleverness to make the regular expression work properly.
.SS "be"
.IX Subsection "be"
Builds code to match 'beshort' and 'belong' magic (eg audio/mpeg, 
image/jpeg).
.SH "PRIVATE METHODS"
.IX Header "PRIVATE METHODS"
.SS "_substr_matching"
.IX Subsection "_substr_matching"
Sometimes the data is smaller than the offset we're looking for in the
file. If this is the case, then the file is obviously not of that type,
and furthermore we should avoid issuing a couple of warnings that Perl
would otherwise emit.
.PP
This subroutine generates this code.
.SS "_get_escapes"
.IX Subsection "_get_escapes"
Returns a reference to a hash defining characters that should not be 
escaped.
.SH "TODO"
.IX Header "TODO"
.RS 4
* Add handlers for other magic types (bedate, byte, etc)
.Sp
* Make verbosity/logging nicer.
.Sp
* Find more edge cases.
.Sp
* Remove redundant 'if (length \f(CW$data\fR > 0)' check.
.RE
.PP
Longer term:
.Sp
.RS 4
* Fix for multiple magic format types?
.RE
.SH "BUGS"
.IX Header "BUGS"
Incomplete. Some known issues with odd entries in mime-magic. Skips
some mime-magic lines.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::Type, which is partially generated by this module.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Mison <pmison@fotango.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2003 Fotango Ltd.
.SH "LICENSE"
.IX Header "LICENSE"
Licensed under the same terms as Perl itself.
